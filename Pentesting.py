""" Easy pentest lib """

# Wordlist generator
# Bruteforce sample sites
# Advanced hash cracking

"""
	@Author : Daniel Victor Freire Feitosa
	@Version : 1.0.0
	<danielfreire56@hotmail.com>


 Lib focada em facilitar o desenvolvimento de programas com foco em pentesting e seguranca ofensiva
construida no Windows 10 pro, otimizacoes sao bem vistas e de grande valia.

	# Futures Modules And Updates
		[Module Payloads creating] - v1.0.5
		[Module Ransomware creating] - v1.5.0
		[Module Batsploit] - v2.0.0
		[Module Metasploit] - v2.0.5
		[Exceptions add] - v2.0.9
"""

class wordlist():
	def __init__(self, wd_name, wd_min_length, wd_max_length, wd_chars):
		self.wd_name = wd_name
		self.wd_min_length = wd_min_length
		self.wd_max_length = wd_max_length
		self.wd_chars = wd_chars
	def create(self):
		from itertools import product
		file = open(self.wd_name, "w")
		for i in xrange(self.wd_min_length, self.wd_max_length+1):
			for xs in product(self.wd_chars, repeat=i):
				string=''.join(xs)
				file.write(string+"\n")
		file.close()
		return 0
class bruteforce():
	def __init__(self, url, uname, login_param, pwd_param, fail_msg, wordlist):
		self.url = url
		self.uname = uname
		self.login_param = login_param
		self.pwd_param = pwd_param
		self.fail_msg = fail_msg
		self.wordlist = wordlist
	def start(self):
		from requests import post
		from sys import exit
		wd_file = open(self.wordlist, "r")
		for i in wd_file:
			pwd = i.strip()
			data = {self.login_param : self.uname, self.pwd_param : pwd}
			r=post(self.url, data=data)
			if self.fail_msg in r.content:
				print "[ATTEMP] %s:%s"%(self.uname, pwd)
			else:
				print "\n[BRUTEFORCE SUCCESS] %s:%s\n"%(self.uname, pwd)
				exit()
		wd_file.close()
class hashcrack():
	def __init__(self, raw_hash, type_hash, min_length=0, max_length=0, chars=None, wordlist=None, wordlists=None):
		self.raw_hash = raw_hash
		self.min_length = min_length
		self.max_length = max_length
		self.type_hash = type_hash
		self.chars = chars
		self.wordlist = wordlist
		self.wordlists = wordlists

	def cartesian_crack(self):
		from itertools import product
		from sys import exit
		if self.type_hash == "md5":
			from hashlib import md5
		elif self.type_hash == "sha1":
			from hashlib import sha1
		elif self.type_hash == "sha512":
			from hashlib import sha512
		elif self.type_hash == "sha224":
			from hashlib import sha224
		elif self.type_hash == "sha256":
			from hashlib import sha256
		elif self.type_hash == "sha384":
			from hashlib import sha384

		for n in xrange(self.min_length, self.max_length+1):
			for xs in product(self.chars, repeat=n):
				string=''.join(xs)

				if self.type_hash == "md5":
					hashed_string = md5(string).hexdigest()
				elif self.type_hash == "sha1":
					hashed_string = sha1(string).hexdigest()
				elif self.type_hash == "sha512":
					hashed_string = sha512(string).hexdigest()
				elif self.type_hash == "sha224":
					hashed_string = sha224(string).hexdigest()
				elif self.type_hash == "sha256":
					hashed_string = sha256(string).hexdigest()
				elif self.type_hash == "sha384":
					hashed_string = sha384(string).hexdigest()

				if self.raw_hash == hashed_string:
					print "\n[CRACKED HASH] %s:%s\n"%(hashed_string, string)
					exit()
				else:
					print "[ATTEMP] %s:%s"%(self.raw_hash, string)
	def wordlist_crack(self):
		from sys import exit
		if self.type_hash == "md5":
			from hashlib import md5
		elif self.type_hash == "sha1":
			from hashlib import sha1
		elif self.type_hash == "sha512":
			from hashlib import sha512
		elif self.type_hash == "sha224":
			from hashlib import sha224
		elif self.type_hash == "sha256":
			from hashlib import sha256
		elif self.type_hash == "sha384":
			from hashlib import sha384

		file_list = open(self.wordlist, "r")
		for i in file_list:
			string = i.strip()

			if self.type_hash == "md5":
				hashed_string = md5(string).hexdigest()
			elif self.type_hash == "sha1":
				hashed_string = sha1(string).hexdigest()
			elif self.type_hash == "sha512":
				hashed_string = sha512(string).hexdigest()
			elif self.type_hash == "sha224":
				hashed_string = sha224(string).hexdigest()
			elif self.type_hash == "sha256":
				hashed_string = sha256(string).hexdigest()
			elif self.type_hash == "sha384":
				hashed_string = sha384(string).hexdigest()

			if self.raw_hash == hashed_string:
				print "\n[CRACKED HASH] %s:%s\n"%(hashed_string, string)
				exit()
			else:
				print "[ATTEMP] %s:%s"%(self.raw_hash, string)
	def wordlist_cartesian_crack(self):
		from threading import Thread as thread
		crack = Hashcrack(self.raw_hash, self.type_hash, self.min_length, self.max_length, self.chars, self.wordlist)
		thread(target=crack.cartesian_crack()).start()
		thread(target=crack.wordlist_crack()).start()
	def multiple_wordlits_cartesian_crack(self):
		from threading import Thread as thread
		crack = Hashcrack(self.raw_hash, self.type_hash, self.min_length, self.max_length, self.chars)
		for wd in self.wordlists:
			thread(target=Hashcrack(self.raw_hash, self.type_hash, 0, 0, None, wd).wordlist_crack()).start()
		thread(target=crack.cartesian_crack()).start()